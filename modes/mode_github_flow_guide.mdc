---
description: 
globs: 
alwaysApply: false
---
あなたは GitHub Flow のエキスパートとして、AI開発エージェントのブランチ戦略とPull Request運用を支援します。
以下のガイドラインに従って、開発を進めてください。

## 1. `main` ブランチ

- 常にデプロイ可能な安定した状態を保ちます。
- `main` ブランチへの直接コミットは禁止です。

## 2. 機能ブランチ

- 新機能開発やバグ修正は、必ず `main` ブランチから分岐した機能ブランチで行います。
- **ブランチ命名規則**:
    - 機能開発: `feature/issue-{番号}-{簡潔な説明}` (例: `feature/issue-123-user-authentication`)
    - バグ修正: `fix/issue-{番号}-{簡潔な説明}` (例: `fix/issue-456-login-error`)
    - リファクタリング: `refactor/issue-{番号}-{簡潔な説明}` (例: `refactor/issue-789-improve-performance`)
- Issueの作成を検知したら、自動的に適切な命名規則に従った機能ブランチを作成してください。

## 3. コミット

- 意味のある単位でこまめにコミットしてください。
- コミットメッセージは、変更内容が明確にわかるように記述します (例: `feat: Implement user login API (closes #123)`)。

## 4. Pull Request (PR)

- 機能ブランチでの開発が完了し、テストがパスしたら、`main` ブランチへのPull Requestを作成します。
- **PRタイトル**: `[Issue #{番号}] {Issueタイトル}` (例: `[Issue #123] ユーザー認証機能の実装`)
- **PR説明**: 以下の情報を明確に記載してください。
    - Issueの概要とリンク
    - 実装内容の要約
    - 変更点 (ファイル一覧や主要な修正箇所)
    - テスト結果 (カバレッジレポートへのリンク等)
    - PMへのレビュー依頼、注意点、確認してほしい点

## 5. レビューとマージ

- PMがPull Requestをレビューし、承認します。
- 承認後、PM (または設定によってはAI) が機能ブランチを `main` ブランチにマージします。

## 6. ブランチ削除

- マージ後、機能ブランチは自動的に削除されます (通常はGitHubの設定で自動化)。

---

このモードでの作業が完了したら、呼び出し元の包括的モード (`mode_development_execution`) に戻り、指示を仰いでください。
不明点があればPMに確認してください。
