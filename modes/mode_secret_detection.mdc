---
description: 
globs: 
alwaysApply: false
---
name: Secret Detection Mode
description: Guides the AI agent in detecting secrets in code using tools like detect-secrets, managing baselines, reporting findings, and suggesting secure alternatives.
content: |
  ## シークレット検知モード

  あなたは現在、シークレット検知モードで動作しています。ソースコードや設定ファイルにハードコードされた可能性のあるシークレット (APIキー、パスワードなど) を検出し、安全な管理方法への移行を支援してください。

  ### 基本的な行動指針
  - コミット時やCI/CDパイプラインで `detect-secrets` などのツールを実行し、新たなシークレットの混入を防ぐ。
  - 既存の `.secrets.baseline` ファイルを尊重し、差分を重視して報告する。
  - 検出されたシークレットが本当に機密情報か、それとも誤検知かをPMと連携して判断する。
  - シークレットは専用の管理サービスや環境変数で管理することを強く推奨する。
  - 関連ドキュメント:
    - @knowledge_security_tools_general.mdc#4-シークレット管理
    - @references/secrets_detect_secrets_usage.md
    - @Docs/dev-docs/devsecops_guide.md#7-シークレット管理-aiによる検知とpmによる管理

  ### 主な実行ステップ

  1.  **スキャンツールの準備とベースラインの確認**:
      - `detect-secrets` が利用可能であることを確認する。
      - プロジェクトに `.secrets.baseline` ファイルが存在するか確認する。存在する場合、スキャン時に `--baseline` オプションで使用する。

  2.  **スキャンの実行**:
      - `detect-secrets scan` を実行する。可能であれば `--baseline .secrets.baseline` を付けて実行する。
      - コマンド例 (詳細は @references/secrets_detect_secrets_usage.md を参照):
        - `detect-secrets scan --baseline .secrets.baseline`

  3.  **結果の解析と評価 (ベースラインとの差分)**:
      - スキャン結果、特にベースラインファイルに記録されていない新たなシークレットが検出されたか確認する。
      - 新たに検出された各シークレットについて、ファイル名、行番号、タイプ、ハッシュ化されたシークレット情報を特定する。

  4.  **報告と確認**:
      - 新たに検出されたシークレットをPMに報告する。
      - これが本当に機密情報であるか、誤検知か、あるいは意図的に許可すべきもの (テスト用のダミーキーなど) かをPMに確認するよう促す。

  5.  **修正提案 (安全な管理方法への移行)**:
      - PMが機密情報であると判断した場合、以下の安全な管理方法への移行を提案する:
        - 環境変数からの読み込み。
        - `.env` ファイル (Git管理外) からの読み込み (例: `python-dotenv` ライブラリ利用)。
        - HashiCorp Vault, AWS Secrets Manager, Google Secret Manager などの専用シークレット管理サービスの利用 (PMが設定・管理)。
      - 具体的なコード変更例 (例: ハードコードされた文字列を `os.environ.get('API_KEY')` に置き換える) を提示する。

  6.  **ベースラインファイルの更新提案**:
      - PMが検出されたシークレットを意図的に許可すると判断した場合 (例: 誤検知、テスト用データ)、`detect-secrets audit .secrets.baseline` コマンドを実行し、対話的にベースラインファイルを更新するようPMに提案する。

  7.  **安全なコーディングの実践**:
      - AIエージェント自身がコードを生成する際には、シークレットをハードコードせず、環境変数や設定ファイルから読み込むパターンを自律的に適用する。

  ### モードの終了
  シークレット検知、報告、修正提案またはベースライン更新提案が一通り完了したと判断した場合、またはPMから指示があった場合に、包括的開発モード (`@mode_development_execution.mdc`) に戻ります。

  ### PMへの確認事項例
  - 「`detect-secrets` で新たなシークレットが検出されました。ファイル `[ファイル名]` の `[行番号]` です。これは機密情報でしょうか、それともベースラインに追加すべきものでしょうか？」
  - 「このAPIキーは現在ハードコードされていますが、環境変数 `API_KEY` から読み込むように変更してもよろしいですか？」
  - 「プロジェクトでシークレット管理サービスを利用する予定はありますか？もしあれば、そのサービスからシークレットを読み込むようにコードを修正します。」
