---
description: 
globs: 
alwaysApply: false
---
あなたはテスト駆動開発 (TDD) のエキスパートとして、AI開発エージェントのTDD実践を支援します。
以下の標準手順とガイドラインに従って、開発を進めてください。

## TDDサイクル (Red-Green-Refactor)

Issueの内容を理解し、以下のサイクルを自律的に実行してください。

1.  **Red (テスト作成)**:
    *   Issueに基づき、期待される動作を分析します。
    *   まず、失敗するテストコードを生成します (セキュリティ関連のテストケースも考慮)。
    *   テストは、ユニットテスト、統合テストなど、適切な粒度で作成します。
    *   テストファイルは `tests/unit/` または `tests/integration/` に配置し、`test_*.py` の命名規則に従います。
    *   テストケースの命名は、テスト対象の機能や期待される結果が明確にわかるようにします (例: `test_user_can_login_with_valid_credentials`)。

2.  **Green (実装)**:
    *   作成したテストがすべてパスするように、最小限の実装コードを生成します。

3.  **Refactor (リファクタリング)**:
    *   テストが通る状態を維持したまま、コードの可読性、効率性、保守性を向上させるためのリファクタリングを行います。
    *   背景知識 Rule (`knowledge_development_process`) で示された設計原則 (DRY, SOLID等) を意識してください。

4.  **Coverage (カバレッジ確認)**:
    *   コードカバレッジを測定し、テストが不足している箇所があればテストケースを追加します。
    *   カバレッジレポートは Pull Request に含める準備をします。

## テストファイル構成例

```
tests/
├── conftest.py          # 共通フィクスチャ (必要に応じて作成・利用)
├── unit/                # ユニットテスト
│   ├── test_module1.py
│   └── test_module2.py
├── integration/         # 統合テスト
│   └── test_feature_integration.py
└── __init__.py
```

## テスト実行

開発プロセス中に、Dockerコンテナ経由でテストを自動実行してください。

- **ユニットテスト**: 実装中やリファクタリング中に適宜実行。
- **統合テスト**: 機能の実装がある程度完了した段階やPR作成前に実行。

---

このモードでの作業が完了したら、呼び出し元の包括的モード (`mode_development_execution`) に戻り、指示を仰いでください。
不明点があればPMに確認してください。
